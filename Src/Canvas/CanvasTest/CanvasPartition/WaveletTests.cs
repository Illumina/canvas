using Xunit;
using CanvasPartition;
using System.Collections.Generic;

namespace CanvasTest.CanvasPartition
{
    public class WaveletTests
    {
        [Fact]
        public void MinimalWaveletTest()
        {
            var coverage = new double[] {
                50, 45, 55, 47, 60, 52, 44, 44, 56, 60,
                /*break*/ 0, 3, 5, 1, 3, 0, 0, 5, 4, 0,
                /*break*/ 100, 110, 95, 90, 97, 104, 110, 107, 91, 102,
                /*break*/ 2050, 2200, 2300, 2350, 2050, 2000, 2100, 2100, 2150, 2000,
                /*break*/ 62.55, 41.28, 57.97, 72.46, 65.69, 68.59, 55.07, 70.53, 67.63, 60.47,
                68.59, 62.8, 63.76, 59.95, 60.93, 60.47, 43.62, 57, 61.38, 51.55,
                39.61, 58.97, 46.37, 68.4, 47.17, 71.74, 64.43, 57.98, 55.03, 54.52,
                56.5, 62.45, 50.24, 57, 51.55, 64.57, 51.2, 51.1, 63.56, 58.51,
                63.56, 51.1, 48.42, 57.5, 51.45, 48.86, 53.14, 47.34, 56.5, 53.47,
                65.69, 49.27, 52.54, 45.6, 49.57, 54.1, 61.91, 58.49, 55.03, 51.91,
                /*break*/ 2587.6, 2633.79, 2295.72, 2254.67, 2527.69, 2700, 2750, 2500, 2300, 2400,
                2632.09, 2266.48, 2320.11, 2441.94, 2400.39, 2313.78, 2289.68, 2440.37, 2606.41, 2284.83,
                2555.5, 2408.51, 2365.23, 2521.85, 2436.49, 2218.17, 2389.04, 2332.93, 2221.07, 2187.57,
                2246.41, 2346.06, 2433.46, 2394, 2492.31, 2449.07, 2585.95, 2342.9, 2357.36, 2247.29,
                2418.28, 2426.28, 2330.78, 2503.74, 2485.81, 2476.55, 2479.5, 2453.48, 2482.23, 2412.67,
                /*break*/ 60.41, 53.59, 61.91, 56.03, 53.59, 51.2, 49.16, 54.85, 55.92, 49.01,
                /*break*/ 2066.74, 2089.66, 2341.62, 2434.64, 2267.33, 2265.26, 2453, 2404.9, 2100, 2200,
                /*break*/ 150, 145, 155, 147, 160, 152, 144, 144, 156, 160,
                /*break*/ 100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 103, /*break*/ 55, 43, 62, 47,
                /*break*/ 100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109,
                100, 105, 103, 101, 99, 97, 95, 93, 91, 109
              };
            var breakpoints = new List<int>();

            var dataByChr = new Dictionary<string, double[]>();
            dataByChr.Add("debugChr", coverage);
            var CV = SegmentationInput.GetCoverageVariability(11, dataByChr);
            var factorOfThreeCVs = SegmentationInput.FactorOfThreeCoverageVariabilities(dataByChr);
            WaveletSegmentation.HaarWavelets(coverage, 5, 80,
                                   breakpoints, false, 5, CV, factorOfThreeCVs);
            Assert.Equal(12, breakpoints.Count);
            Assert.Equal(0, breakpoints[0]);
            Assert.Equal(10, breakpoints[1]);
            Assert.Equal(20, breakpoints[2]);
            Assert.Equal(30, breakpoints[3]);
            Assert.Equal(40, breakpoints[4]);
            Assert.Equal(100, breakpoints[5]);
            Assert.Equal(150, breakpoints[6]);
            Assert.Equal(160, breakpoints[7]);
            Assert.Equal(170, breakpoints[8]);
            Assert.Equal(180, breakpoints[9]);
            Assert.Equal(376, breakpoints[10]);
            Assert.Equal(380, breakpoints[11]);
        }
    }
}