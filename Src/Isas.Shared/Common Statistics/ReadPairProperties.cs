using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Xml.Schema;
using System.Xml.Serialization;

// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// Modified to make serialization/deserialization work

namespace Isas.Shared
{
    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairProperties
    {
        public ReadPairControlParametersUsed ControlParametersUsed;
        public ReadPairInsertSize InsertSize = new ReadPairInsertSize();
        public ReadPairLength Length;
        public ReadPairOrientation Orientation = new ReadPairOrientation();
        public ReadPairPairs Pairs = new ReadPairPairs();
        public ReadsNode Reads = new ReadsNode();
        public int GenomeNumber { get; set; }
		// ReSharper restore InconsistentNaming

		public static string SummaryPairedEndFile = "PairInfo.xml";
		
		public void Serialize(string saveFileName)
        {
            XmlSerializer xs = new XmlSerializer(typeof (ReadPairProperties));

            using (FileStream fs = new FileStream(saveFileName, FileMode.Create))
                xs.Serialize(fs, this);
        }

        public static ReadPairProperties Deserialize(string inputFile)
        {
            FileStream inputStream = null;
            try
            {
                XmlSerializer dat = new XmlSerializer(typeof (ReadPairProperties));
                inputStream = new FileStream(inputFile, FileMode.Open, FileAccess.Read);
                return dat.Deserialize(inputStream) as ReadPairProperties;
            }
            catch
            {
                return null;
            }
            finally
            {
                if (inputStream != null)
                    inputStream.Close();
            }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Read2NM
    {
        private string _noMatchToEitherField;
        private SingletonRead1[] _singletonRead1Field;

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string NoMatchToEither
        {
            get { return _noMatchToEitherField; }
            set { _noMatchToEitherField = value; }
        }

        [XmlElement("SingletonRead1")]
        public SingletonRead1[] SingletonRead1
        {
            get { return _singletonRead1Field; }
            set { _singletonRead1Field = value; }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class SingletonRead1
    {
        private string _alignmentOkField;
        private string _alignmentPoorField;

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string AlignmentOK
        {
            get { return _alignmentOkField; }
            set { _alignmentOkField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string AlignmentPoor
        {
            get { return _alignmentPoorField; }
            set { _alignmentPoorField = value; }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Read2SingleAlignmentFound
    {
        private BothAlignButNoFeasiblePair[] _bothAlignButNoFeasiblePairField;
        private Read2SingleAlignmentFoundSingletonRead2[] _singletonRead2Field;
        private string _uniquePairedAlignmentField;

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string UniquePairedAlignment
        {
            get { return _uniquePairedAlignmentField; }
            set { _uniquePairedAlignmentField = value; }
        }

        [XmlElement("SingletonRead2", Form = XmlSchemaForm.Unqualified)]
        public Read2SingleAlignmentFoundSingletonRead2[] SingletonRead2
        {
            get { return _singletonRead2Field; }
            set { _singletonRead2Field = value; }
        }

        [XmlElement("BothAlignButNoFeasiblePair")]
        public BothAlignButNoFeasiblePair[] BothAlignButNoFeasiblePair
        {
            get { return _bothAlignButNoFeasiblePairField; }
            set { _bothAlignButNoFeasiblePairField = value; }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class Read2SingleAlignmentFoundSingletonRead2
    {
        private string _alignmentOKField;

        private string _alignmentPoorField;

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string AlignmentOK
        {
            get { return _alignmentOKField; }
            set { _alignmentOKField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string AlignmentPoor
        {
            get { return _alignmentPoorField; }
            set { _alignmentPoorField = value; }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class BothAlignButNoFeasiblePair
    {
        private BothAlignButNoFeasiblePair[] _bothAlignButNoFeasiblePair1Field;
        private string _bothAlignmentsOKField;

        private string _read1PoorField;

        private string _read2PoorField;

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string BothAlignmentsOK
        {
            get { return _bothAlignmentsOKField; }
            set { _bothAlignmentsOKField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string Read1Poor
        {
            get { return _read1PoorField; }
            set { _read1PoorField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string Read2Poor
        {
            get { return _read2PoorField; }
            set { _read2PoorField = value; }
        }

        [XmlElement("BothAlignButNoFeasiblePair")]
        public BothAlignButNoFeasiblePair[] BothAlignButNoFeasiblePair1
        {
            get { return _bothAlignButNoFeasiblePair1Field; }
            set { _bothAlignButNoFeasiblePair1Field = value; }
        }
    }


    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairControlParametersUsed
    {
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string circular
        {
            get { return _circularField; }
            set { _circularField = value; }
        }

        [XmlElement("max-insert-size", Form = XmlSchemaForm.Unqualified)]
        public string maxinsertsize
        {
            get { return _maxinsertsizeField; }
            set { _maxinsertsizeField = value; }
        }

        [XmlElement("min-insert-size", Form = XmlSchemaForm.Unqualified)]
        public string mininsertsize
        {
            get { return _mininsertsizeField; }
            set { _mininsertsizeField = value; }
        }

        [XmlElement("min-paired-read-alignment-score", Form = XmlSchemaForm.Unqualified)]
        public string minpairedreadalignmentscore
        {
            get { return _minpairedreadalignmentscoreField; }
            set { _minpairedreadalignmentscoreField = value; }
        }

        [XmlElement("min-percent-consistent-pairs", Form = XmlSchemaForm.Unqualified)]
        public string minpercentconsistentpairs
        {
            get { return _minpercentconsistentpairsField; }
            set { _minpercentconsistentpairsField = value; }
        }

        [XmlElement("min-percent-unique-pairs", Form = XmlSchemaForm.Unqualified)]
        public string minpercentuniquepairs
        {
            get { return _minpercentuniquepairsField; }
            set { _minpercentuniquepairsField = value; }
        }

        [XmlElement("min-single-read-alignment-score", Form = XmlSchemaForm.Unqualified)]
        public string minsinglereadalignmentscore
        {
            get { return _minsinglereadalignmentscoreField; }
            set { _minsinglereadalignmentscoreField = value; }
        }

        [XmlElement("num-standard-deviations", Form = XmlSchemaForm.Unqualified)]
        public string numstandarddeviations
        {
            get { return _numstandarddeviationsField; }
            set { _numstandarddeviationsField = value; }
        }

        [XmlElement("use-bases-1", Form = XmlSchemaForm.Unqualified)]
        public string usebases1
        {
            get { return _usebases1Field; }
            set { _usebases1Field = value; }
        }

        [XmlElement("use-bases-2", Form = XmlSchemaForm.Unqualified)]
        public string usebases2
        {
            get { return _usebases2Field; }
            set { _usebases2Field = value; }
        }
		// ReSharper restore InconsistentNaming


		private string _circularField;
		private string _maxinsertsizeField;
		private string _mininsertsizeField;
		private string _minpairedreadalignmentscoreField;
		private string _minpercentconsistentpairsField;
		private string _minpercentuniquepairsField;
		private string _minsinglereadalignmentscoreField;
		private string _numstandarddeviationsField;
		private string _usebases1Field;
		private string _usebases2Field;
	}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairInsertSize
    {
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public long HighSD
        {
            get { return _highSdField; }
            set { _highSdField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public long LowSD
        {
            get { return _lowSdField; }
            set { _lowSdField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public long Max
        {
            get { return _maxField; }
            set { _maxField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public long Median
        {
            get { return _medianField; }
            set { _medianField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public long Min
        {
            get { return _minField; }
            set { _minField = value; }
        }
		// ReSharper restore InconsistentNaming

		private long _highSdField;
		private long _lowSdField;
		private long _maxField;
		private long _medianField;
		private long _minField;
	}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairLength
    {
        [XmlElement("Read1", Form = XmlSchemaForm.Unqualified)]
        public ReadPairPropertiesLengthRead1[] Read1
        {
            get { return _read1Field; }
            set { _read1Field = value; }
        }

        [XmlElement("Read2", Form = XmlSchemaForm.Unqualified)]
        public ReadPairPropertiesLengthRead2[] Read2
        {
            get { return _read2Field; }
            set { _read2Field = value; }
        }
		// ReSharper restore InconsistentNaming

		private ReadPairPropertiesLengthRead1[] _read1Field;
		private ReadPairPropertiesLengthRead2[] _read2Field;
	}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairPropertiesLengthRead1
    {
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int SeedLengthForELAND
        {
            get { return _seedLengthForElandField; }
            set { _seedLengthForElandField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int Total
        {
            get { return _totalField; }
            set { _totalField = value; }
        }
		// ReSharper restore InconsistentNaming

		private int _seedLengthForElandField;
		private int _totalField;
	}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairPropertiesLengthRead2
    {
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int SeedLengthForELAND
        {
            get { return _seedLengthForElandField; }
            set { _seedLengthForElandField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int Total
        {
            get { return _totalField; }
            set { _totalField = value; }
        }
		// ReSharper restore InconsistentNaming

		private int _seedLengthForElandField;
		private int _totalField;
	}

	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadsNode
    {
        public Read1SAF Read1SingleAlignmentFound = new Read1SAF();
		// ReSharper restore InconsistentNaming
	}

	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class Read1SAF
    {
        public Read2SAF Read2SingleAlignmentFound = new Read2SAF();
		// ReSharper restore InconsistentNaming
	}

	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class Read2SAF
    {
        public float UniquePairedAlignment;
		// ReSharper restore InconsistentNaming
	}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairOrientation
    {
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int Fm
        {
            get { return _fmField; }
            set { _fmField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int Fp
        {
            get { return _fpField; }
            set { _fpField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string Nominal
        {
            get { return _nominalField; }
            set { _nominalField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int NominalOrientationButLargeInsert
        {
            get { return _nominalOrientationButLargeInsertField; }
            set { _nominalOrientationButLargeInsertField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public float NominalOrientationButLargeInsertPercent
        {
            get { return _nominalOrientationButLargeInsertPercentField; }
            set { _nominalOrientationButLargeInsertPercentField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int NominalOrientationButSmallInsert
        {
            get { return _nominalOrientationButSmallInsertField; }
            set { _nominalOrientationButSmallInsertField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public float NominalOrientationButSmallInsertPercent
        {
            get { return _nominalOrientationButSmallInsertPercentField; }
            set { _nominalOrientationButSmallInsertPercentField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public float NominalOrientationPercent
        {
            get { return _nominalOrientationPercentField; }
            set { _nominalOrientationPercentField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int Rm
        {
            get { return _rmField; }
            set { _rmField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int Rp
        {
            get { return _rpField; }
            set { _rpField = value; }
        }
		// ReSharper restore InconsistentNaming


		private int _fmField;
		private int _fpField;
		private string _nominalField;
		private int _nominalOrientationButLargeInsertField;
		private float _nominalOrientationButLargeInsertPercentField;
		private int _nominalOrientationButSmallInsertField;
		private float _nominalOrientationButSmallInsertPercentField;
		private float _nominalOrientationPercentField;
		private int _rmField;
		private int _rpField;
	}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
	// ReSharper disable InconsistentNaming - prevents ReSharper from renaming serializeable members that are sensitive to being changed
	public class ReadPairPairs
    {
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int ClustersPassedFiltering
        {
            get { return _clustersPassedFilteringField; }
            set { _clustersPassedFilteringField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int ClustersTotal
        {
            get { return _clustersTotalField; }
            set { _clustersTotalField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public int ClustersUsedToComputeInsert
        {
            get { return _clustersUsedToComputeInsertField; }
            set { _clustersUsedToComputeInsertField = value; }
        }

        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public float InitialUniquePairsPercent
        {
            get { return _initialUniquePairsPercentField; }
            set { _initialUniquePairsPercentField = value; }
        }
		// ReSharper restore InconsistentNaming

		private int _clustersPassedFilteringField;
		private int _clustersTotalField;
		private int _clustersUsedToComputeInsertField;
		private float _initialUniquePairsPercentField;
}

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class ReadPairReads
    {
        private ReadPairPropertiesReadsRead1NM[] _read1NMField;

        private Read2SingleAlignmentFound[][] _read1QCField;

        private Read2SingleAlignmentFound[][] _read1RepeatField;

        private ReadPairPropertiesReadsRead1SingleAlignmentFound[] _read1SingleAlignmentFoundField;

        [XmlElement("Read1NM", Form = XmlSchemaForm.Unqualified)]
        public ReadPairPropertiesReadsRead1NM[] Read1NM
        {
            get { return _read1NMField; }
            set { _read1NMField = value; }
        }

        [XmlArray(Form = XmlSchemaForm.Unqualified)]
        [XmlArrayItem("Read2SingleAlignmentFound", typeof (Read2SingleAlignmentFound), IsNullable = false)]
        public Read2SingleAlignmentFound[][] Read1QC
        {
            get { return _read1QCField; }
            set { _read1QCField = value; }
        }

        [XmlArray(Form = XmlSchemaForm.Unqualified)]
        [XmlArrayItem("Read2SingleAlignmentFound", typeof (Read2SingleAlignmentFound), IsNullable = false)]
        public Read2SingleAlignmentFound[][] Read1Repeat
        {
            get { return _read1RepeatField; }
            set { _read1RepeatField = value; }
        }

        [XmlElement("Read1SingleAlignmentFound", Form = XmlSchemaForm.Unqualified)]
        public ReadPairPropertiesReadsRead1SingleAlignmentFound[] Read1SingleAlignmentFound
        {
            get { return _read1SingleAlignmentFoundField; }
            set { _read1SingleAlignmentFoundField = value; }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class ReadPairPropertiesReadsRead1NM
    {
        private Read2NM[] _read2NMField;

        private Read2SingleAlignmentFound[] _read2SingleAlignmentFoundField;

        [XmlElement("Read2NM")]
        public Read2NM[] Read2NM
        {
            get { return _read2NMField; }
            set { _read2NMField = value; }
        }

        [XmlElement("Read2SingleAlignmentFound")]
        public Read2SingleAlignmentFound[] Read2SingleAlignmentFound
        {
            get { return _read2SingleAlignmentFoundField; }
            set { _read2SingleAlignmentFoundField = value; }
        }
    }

    [GeneratedCode("xsd", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class ReadPairPropertiesReadsRead1SingleAlignmentFound
    {
        private Read2NM[] _read2NMField;

        private SingletonRead1[][] _read2QCField;

        private SingletonRead1[][] _read2RepeatField;

        private Read2SingleAlignmentFound[] _read2SingleAlignmentFoundField;

        [XmlElement("Read2NM")]
        public Read2NM[] Read2NM
        {
            get { return _read2NMField; }
            set { _read2NMField = value; }
        }

        [XmlArray(Form = XmlSchemaForm.Unqualified)]
        [XmlArrayItem("SingletonRead1", typeof (SingletonRead1), IsNullable = false)]
        public SingletonRead1[][] Read2QC
        {
            get { return _read2QCField; }
            set { _read2QCField = value; }
        }

        [XmlArray(Form = XmlSchemaForm.Unqualified)]
        [XmlArrayItem("SingletonRead1", typeof (SingletonRead1), IsNullable = false)]
        public SingletonRead1[][] Read2Repeat
        {
            get { return _read2RepeatField; }
            set { _read2RepeatField = value; }
        }

        [XmlElement("Read2SingleAlignmentFound")]
        public Read2SingleAlignmentFound[] Read2SingleAlignmentFound
        {
            get { return _read2SingleAlignmentFoundField; }
            set { _read2SingleAlignmentFoundField = value; }
        }
    }
}